--INSERT NEW RECORDS IN EMPLOYEE TABLE
INSERT INTO EMPLOYEE VALUES
(5011, 'Diana', 'Fernandes', 26, 'Female'),
(NULL, 'Srini', 'Vasulu', NULL, NULL),
(5013, 'Manmohan', 'Singh', NULL, 'Male')

--INSERT NEW RECORDS IN SALARY TABLE
INSERT INTO SALARY VALUES
(5010, 'Project Manager', 70000),
(NULL, 'Salesman', 43000),
(5013, 'Team Lead', 50000)

/*
JOINS - COMBINES TWO TABLES INTO A SINGLE OUTPUT
INNER - A INTERSECTION B, 
FULL OUTER - A UNION B
LEFT OUTER - A (MEANS: EVERYTHING ON LEFT)
RIGHT OUTER - B (MEANS: EVERYTHING ON RIGHT)
*/
SELECT *
FROM EMPLOYEE
JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT * FROM EMPLOYEE
FULL OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT * FROM EMPLOYEE
LEFT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT * FROM EMPLOYEE
RIGHT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

/*IMPROVIZED VERSION OF USING JOINS*/
SELECT EMPLOYEE.EID, FIRSTNAME, LASTNAME, JOB_TITLE, SALARY
FROM EMPLOYEE
JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT SALARY.EID, FIRSTNAME, LASTNAME, JOB_TITLE, SALARY
FROM EMPLOYEE
RIGHT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT EMPLOYEE.EID, FIRSTNAME, LASTNAME, JOB_TITLE, SALARY
FROM EMPLOYEE
RIGHT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT EMPLOYEE.EID, FIRSTNAME, LASTNAME, JOB_TITLE, SALARY
FROM EMPLOYEE
LEFT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

SELECT SALARY.EID, FIRSTNAME, LASTNAME, JOB_TITLE, SALARY
FROM EMPLOYEE
LEFT OUTER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

--PERSON WHO MAKES THE MOST MONEY APART FROM 'Veni'
SELECT EMPLOYEE.EID, FIRSTNAME, LASTNAME, SALARY
FROM EMPLOYEE
INNER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID
WHERE FIRSTNAME <> 'Veni'
ORDER BY SALARY DESC

--CALCULATE AVERAGE FOR 'Salesman'
SELECT JOB_TITLE, AVG(SALARY) AS AVG_SALARY_SALESMAN
FROM EMPLOYEE
INNER JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID
WHERE JOB_TITLE = 'Salesman'
GROUP BY JOB_TITLE


/*
UNION
*/
--CREATE A NEW WAREHOUSE_EMPLOYEE TABLE
CREATE TABLE WAREHOUSE_EMPLOYEE
(EID INT,
FIRSTNAME VARCHAR(50),
LASTNAME VARCHAR(50),
AGE INT,
GENDER VARCHAR(50))
--INSERT RECORDS
INSERT INTO WAREHOUSE_EMPLOYEE VALUES
(5024, 'Debasis', 'Syasmal', 29, 'Male'),
(5025, 'Gurpreet', 'Singh', 28, 'Male'),
(5027, 'Ashley', 'Drew', 37, 'Female'),
(5013, 'Manmohan', 'Singh', NULL, 'Male')

SELECT * 
FROM EMPLOYEE FULL OUTER JOIN WAREHOUSE_EMPLOYEE
	ON EMPLOYEE.EID = WAREHOUSE_EMPLOYEE.EID
--USE UNION :: REMOVES THE DUPLICATES
SELECT * FROM EMPLOYEE
UNION
SELECT * FROM WAREHOUSE_EMPLOYEE
--UNION ALL :: DUPLICATES INCLUDED
SELECT * FROM EMPLOYEE
UNION ALL
SELECT * FROM WAREHOUSE_EMPLOYEE
ORDER BY EID
--EVEN IF THIS DOESN'T MAKE SENSE
--REMEMBER: ALL COLS DATA_TYPE MUST BE SAME
SELECT EID, FIRSTNAME, AGE FROM EMPLOYEE
UNION
SELECT EID, JOB_TITLE, SALARY FROM SALARY
ORDER BY EID

/*
CASE STATEMENT
*/
--WITH 1 CONDITION
SELECT FIRSTNAME, LASTNAME, AGE,
CASE
	WHEN AGE > 30 THEN 'OLD'
	ELSE 'BABY'
END
FROM EMPLOYEE
WHERE AGE IS NOT NULL
ORDER BY AGE
--WITH 2 CONDITION & BETWEEN STATEMENT
SELECT FIRSTNAME, LASTNAME, AGE,
CASE
	WHEN AGE > 30 THEN 'OLD'
	WHEN AGE BETWEEN 27 AND 30 THEN 'YOUNG'
	ELSE 'BABY'
END
FROM EMPLOYEE
WHERE AGE IS NOT NULL
ORDER BY AGE
--WHENEVER FIRST CONDITION IS MET, IT WILL RETURN ONLY THAT VALUE
SELECT FIRSTNAME, LASTNAME, AGE,
CASE
	WHEN AGE > 30 THEN 'OLD'
	WHEN AGE = 34 THEN 'VENI'
	ELSE 'BABY'
END
FROM EMPLOYEE
WHERE AGE IS NOT NULL
ORDER BY AGE

SELECT FIRSTNAME, LASTNAME, AGE,
CASE
	WHEN AGE = 34 THEN 'VENI'
	WHEN AGE > 30 THEN 'OLD'
	ELSE 'BABY'
END
FROM EMPLOYEE
WHERE AGE IS NOT NULL
ORDER BY AGE

--USEE CASES
--SALARY AFTER UP-RAISALS
SELECT FIRSTNAME, LASTNAME, JOB_TITLE, SALARY,
CASE
	WHEN JOB_TITLE='Salesman' THEN SALARY + (SALARY*.10)
	WHEN JOB_TITLE='Accountant' THEN SALARY + (SALARY*.5)
	WHEN JOB_TITLE='HR' THEN SALARY + (SALARY*.065)
	ELSE SALARY + (SALARY*0.03)
END AS SALARY_AFTER_RAISE
FROM EMPLOYEE JOIN SALARY
	ON EMPLOYEE.EID = SALARY.EID

/*
HAVING CLAUSE
*/
--HAVING STATEMENT MUST GO AFTER GROUP BY STMT
SELECT JOB_TITLE, COUNT(JOB_TITLE)
FROM EMPLOYEE AS E JOIN SALARY AS S
	ON E.EID = S.EID
GROUP BY JOB_TITLE
HAVING COUNT(JOB_TITLE) > 1

SELECT JOB_TITLE, AVG(SALARY)
FROM EMPLOYEE AS E JOIN SALARY AS S
	ON E.EID = S.EID
GROUP BY JOB_TITLE
HAVING AVG(SALARY) > 45000
ORDER BY AVG(SALARY)

/*
UPDATE/ DELETE DATA
*/
SELECT * FROM EMPLOYEE

UPDATE EMPLOYEE
SET EID = 5012
WHERE FIRSTNAME='Srini' AND LASTNAME='Vasulu'

UPDATE EMPLOYEE
SET AGE=31, GENDER='Female'
WHERE FIRSTNAME='Srini' AND LASTNAME='Vasulu'

DELETE FROM EMPLOYEE
WHERE EID = 5008
--WHILE DELETING, FIRST CHECK WITH SELECT STATEMENT,
--THEN USE DELETE STATEMENT
/*
ALIASING
*/
--ALIAS COLUMN NAMES
SELECT FIRSTNAME AS FNAME
FROM EMPLOYEE

SELECT FIRSTNAME FNAME
FROM EMPLOYEE

SELECT FIRSTNAME+' '+LASTNAME AS FULLNAME
FROM EMPLOYEE
--WHILE USING AGREGATE FUNCTION
SELECT AVG(AGE) AS AVG_AGE
FROM EMPLOYEE
--WHILE USING JOIN
SELECT DEMO.EID, SAL.SALARY
FROM EMPLOYEE AS DEMO JOIN SALARY AS SAL
 ON DEMO.EID = SAL.EID

SELECT emp.EID, emp.FIRSTNAME, emp.LASTNAME, 
	sal.JOB_TITLE, ware.AGE
FROM EMPLOYEE emp
LEFT JOIN SALARY sal ON emp.EID=sal.EID
LEFT JOIN WAREHOUSE_EMPLOYEE ware ON emp.EID=ware.EID

/*
PARTITION BY
*/
--ADVANCE OF GROUP BY
SELECT FIRSTNAME, LASTNAME, GENDER, SALARY,
	COUNT(GENDER) OVER (PARTITION BY GENDER) AS TOTAL_GENDER
FROM EMPLOYEE EMP
JOIN SALARY SAL
	ON EMP.EID=SAL.EID
--THE SAME BELOW QUERY IS RUNNING IN PARITITION BY
SELECT  GENDER, COUNT(GENDER)
FROM EMPLOYEE EMP
JOIN SALARY SAL
	ON EMP.EID=SAL.EID
GROUP BY GENDER